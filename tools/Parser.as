package tools{	import flash.geom.*;	import flash.utils.*;	import flash.net.*;	import flash.events.*;	import flash.text.TextField;	import tools.*;		public class Parser{				private var _xml:XML;		private var _rows:Array;		private var _levelUp:String;		private var _levelLeft:String;		private var _levelDown:String;		private var _levelRight:String;		private var _levelName:String;		private var _xmlLoader:XmlLoader;						public function Parser(xml:XML){			_xml = xml;			_rows = new Array();			_levelUp = new String();			_levelLeft = new String();			_levelDown = new String();			_levelRight = new String();			getRows();		}				private function getRows():void{			// get all rows			var rows:XMLList = _xml.level.children();			_levelUp = _xml.level.attribute("levelAbove");			_levelLeft = _xml.level.attribute("levelLeft");			_levelDown = _xml.level.attribute("levelBelow");			_levelRight = _xml.level.attribute("levelRight");			var singleRowRaw:Array;			var singleRowCooked:Array = new Array();			var singleTilePoint:Point;			var singleTile:Array;			var rowString:String = rows[i];			var tileString:String;			for(var i:uint=0;i<rows.length();i++){				rowString= rows[i];				// split numbers in string to cells in singleRow array 				singleRowRaw = rowString.split(",");								singleRowCooked = new Array();								for (var b:uint=0;b<singleRowRaw.length;b++)				{					tileString = singleRowRaw[b];										singleTile = tileString.split(".");										singleTilePoint = new Point(singleTile[0],singleTile[1]);										singleRowCooked.push(singleTilePoint);				}				//save singleRow in _rows array;								_rows.push(singleRowCooked);			}			}				public function saveXml(screenArray:Array, fileName:String, levelAbove:String, levelLeft:String, levelBelow:String, levelRight:String):void{			var oldSingleRow:String;			var newSingleRow:Array;			var rowsTwo:XMLList = _xml.level.children();						_levelName = fileName;						for(var i:uint=0;i<rowsTwo.length();i++){				oldSingleRow = rowsTwo[i];				newSingleRow = screenArray[i];				var rowString:String = "";								for(var b:uint=0;b<newSingleRow.length;b++)				{					rowString = rowString + newSingleRow[b].x + "." + newSingleRow[b].y + ",";				}				rowString = rowString.substring(0,rowString.length-1);								rowsTwo[i] = rowString;			}						var xmlString:String = rowsTwo.toXMLString();			xmlString = "<data><level id='' title='" + fileName + "'" + 			" levelAbove='" + levelAbove + "' levelLeft='" + levelLeft +			"' levelBelow='" + levelBelow + "' levelRight='" + levelRight + "'" +			">" + xmlString + "</level></data>";						var xmlFile:XML = new XML(xmlString);						submitXml(xmlFile, fileName);						//try{			//_xmlLoader = new XmlLoader("http://bradya.com/circles/levellist.xml");			//} catch(e:Error){			//	trace("couldn't load XML file")			//}			// wait till the XmlLoader will finish loading the data 			//_xmlLoader.addEventListener(Event.COMPLETE,onLevelListReady);						//myData.sendAndLoad("save.php", myData, "POST");			//var bytes:ByteArray = new ByteArray();			//bytes.writeUTFBytes(xmlFile);            //var fr:FileReference = new FileReference();			//fr.save(bytes, "filename.xml");		}				function onLevelListReady(evt:Event):void {			//Update level list			var xmlData:XML = XmlLoader(evt.target).xml as XML;						var xmlToAdd:XML = new XML("<level>" + _levelName + ".xml</level>");						trace(xmlData);			var contentNode:XML = xmlData.levellist.level[0];			var parentNode:XML = xmlData.levellist[0];			trace(contentNode);			parentNode.insertChildAfter(contentNode, xmlToAdd);			trace(xmlData);						submitXml(xmlData, "levellist");		}				function submitXml(xmlFile:XML, fileName:String):void {			var xmlURLReq:URLRequest = new URLRequest("http://bradya.com/circles/savexml.php");			//xmlURLReq.data = xmlFile;			//xmlURLReq.contentType = "text/xml";			xmlURLReq.method = URLRequestMethod.POST;						var variables:URLVariables = new URLVariables();			variables.filename = fileName + ".xml";			//fileNameTextInput.text;			variables.filecontents = xmlFile;						xmlURLReq.data = variables;						var xmlSendLoad:URLLoader = new URLLoader();			xmlSendLoad.addEventListener(Event.COMPLETE, onComplete, false, 0, true);			xmlSendLoad.addEventListener(IOErrorEvent.IO_ERROR, onIOError, false, 0, true);			xmlSendLoad.load(xmlURLReq);		}				function onComplete(evt:Event):void {			try {				var xmlResponse:XML = new XML(evt.target.data);				trace(xmlResponse);				//removeEventListener(Event.COMPLETE, onComplete);				//removeEventListener(IOErrorEvent.IO_ERROR, onIOError);			} catch (err:TypeError) {				trace("An error occured when communicating with server:\n" + err.message);			}		}				function onIOError(evt:IOErrorEvent):void {			trace("An error occurred when attempting to load the XML.\n" + evt.text);		}				//return an arra of all rows (every row is an array of numbers		public function get rows():Array{			return _rows;		}		public function get levelAbove():String{			return _levelUp;		}		public function get levelLeft():String{			return _levelLeft;		}		public function get levelBelow():String{			return _levelDown;		}		public function get levelRight():String{			return _levelRight;		}			}}